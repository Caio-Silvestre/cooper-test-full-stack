version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: coopers-postgres
    environment:
      POSTGRES_DB: coopers_db
      POSTGRES_USER: coopers_user
      POSTGRES_PASSWORD: coopers_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - coopers-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U coopers_user -d coopers_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend NestJS
  backend:
    build:
      context: ./coopers-test-back-end
      dockerfile: Dockerfile
    container_name: coopers-backend
    environment:
      NODE_ENV: production
      TYPEORM_HOST: postgres
      TYPEORM_PORT: 5432
      TYPEORM_USERNAME: coopers_user
      TYPEORM_PASSWORD: coopers_password
      TYPEORM_DATABASE: coopers_db
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - coopers-network
    restart: unless-stopped

  # Frontend Next.js
  frontend:
    build:
      context: ./coopers-test-front-end
      dockerfile: Dockerfile
    container_name: coopers-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - coopers-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  coopers-network:
    driver: bridge 